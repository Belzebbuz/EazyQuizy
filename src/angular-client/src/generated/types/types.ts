// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: types/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface GrainStateChangedEvent {
  id: string;
}

export interface AddTagsToQuizRequest {
  tags: string[];
  quizId: string;
}

function createBaseGrainStateChangedEvent(): GrainStateChangedEvent {
  return { id: "" };
}

export const GrainStateChangedEvent: MessageFns<GrainStateChangedEvent> = {
  encode(message: GrainStateChangedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrainStateChangedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrainStateChangedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GrainStateChangedEvent>): GrainStateChangedEvent {
    return GrainStateChangedEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GrainStateChangedEvent>): GrainStateChangedEvent {
    const message = createBaseGrainStateChangedEvent();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAddTagsToQuizRequest(): AddTagsToQuizRequest {
  return { tags: [], quizId: "" };
}

export const AddTagsToQuizRequest: MessageFns<AddTagsToQuizRequest> = {
  encode(message: AddTagsToQuizRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tags) {
      writer.uint32(10).string(v!);
    }
    if (message.quizId !== "") {
      writer.uint32(18).string(message.quizId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTagsToQuizRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTagsToQuizRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quizId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddTagsToQuizRequest>): AddTagsToQuizRequest {
    return AddTagsToQuizRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTagsToQuizRequest>): AddTagsToQuizRequest {
    const message = createBaseAddTagsToQuizRequest();
    message.tags = object.tags?.map((e) => e) || [];
    message.quizId = object.quizId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
