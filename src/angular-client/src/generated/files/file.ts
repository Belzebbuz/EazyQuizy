// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: files/file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "";

export interface FileChunk {
  chunkData: Uint8Array;
}

export interface FileUploadStatus {
  percentageComplete: number;
  isComplete: boolean;
}

function createBaseFileChunk(): FileChunk {
  return { chunkData: new Uint8Array(0) };
}

export const FileChunk: MessageFns<FileChunk> = {
  encode(message: FileChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkData.length !== 0) {
      writer.uint32(10).bytes(message.chunkData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunkData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<FileChunk>): FileChunk {
    return FileChunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileChunk>): FileChunk {
    const message = createBaseFileChunk();
    message.chunkData = object.chunkData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFileUploadStatus(): FileUploadStatus {
  return { percentageComplete: 0, isComplete: false };
}

export const FileUploadStatus: MessageFns<FileUploadStatus> = {
  encode(message: FileUploadStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percentageComplete !== 0) {
      writer.uint32(8).int32(message.percentageComplete);
    }
    if (message.isComplete !== false) {
      writer.uint32(16).bool(message.isComplete);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileUploadStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileUploadStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.percentageComplete = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isComplete = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<FileUploadStatus>): FileUploadStatus {
    return FileUploadStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileUploadStatus>): FileUploadStatus {
    const message = createBaseFileUploadStatus();
    message.percentageComplete = object.percentageComplete ?? 0;
    message.isComplete = object.isComplete ?? false;
    return message;
  },
};

export type FileServiceDefinition = typeof FileServiceDefinition;
export const FileServiceDefinition = {
  name: "FileService",
  fullName: "FileService",
  methods: {
    uploadFile: {
      name: "UploadFile",
      requestType: FileChunk,
      requestStream: true,
      responseType: FileUploadStatus,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface FileServiceImplementation<CallContextExt = {}> {
  uploadFile(
    request: AsyncIterable<FileChunk>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<FileUploadStatus>>;
}

export interface FileServiceClient<CallOptionsExt = {}> {
  uploadFile(
    request: AsyncIterable<DeepPartial<FileChunk>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<FileUploadStatus>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
