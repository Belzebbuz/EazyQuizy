// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: auth/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "";

export interface IsAuthorizedRequest {
  action: string;
  grainId: string;
}

export interface IsAuthorizedResponse {
  authorized: boolean;
}

function createBaseIsAuthorizedRequest(): IsAuthorizedRequest {
  return { action: "", grainId: "" };
}

export const IsAuthorizedRequest: MessageFns<IsAuthorizedRequest> = {
  encode(message: IsAuthorizedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.action !== "") {
      writer.uint32(10).string(message.action);
    }
    if (message.grainId !== "") {
      writer.uint32(18).string(message.grainId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsAuthorizedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsAuthorizedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grainId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IsAuthorizedRequest>): IsAuthorizedRequest {
    return IsAuthorizedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsAuthorizedRequest>): IsAuthorizedRequest {
    const message = createBaseIsAuthorizedRequest();
    message.action = object.action ?? "";
    message.grainId = object.grainId ?? "";
    return message;
  },
};

function createBaseIsAuthorizedResponse(): IsAuthorizedResponse {
  return { authorized: false };
}

export const IsAuthorizedResponse: MessageFns<IsAuthorizedResponse> = {
  encode(message: IsAuthorizedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorized !== false) {
      writer.uint32(8).bool(message.authorized);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsAuthorizedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsAuthorizedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.authorized = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IsAuthorizedResponse>): IsAuthorizedResponse {
    return IsAuthorizedResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsAuthorizedResponse>): IsAuthorizedResponse {
    const message = createBaseIsAuthorizedResponse();
    message.authorized = object.authorized ?? false;
    return message;
  },
};

export type AuthServiceDefinition = typeof AuthServiceDefinition;
export const AuthServiceDefinition = {
  name: "AuthService",
  fullName: "AuthService",
  methods: {
    isAuthorized: {
      name: "IsAuthorized",
      requestType: IsAuthorizedRequest,
      requestStream: false,
      responseType: IsAuthorizedResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AuthServiceImplementation<CallContextExt = {}> {
  isAuthorized(
    request: IsAuthorizedRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IsAuthorizedResponse>>;
}

export interface AuthServiceClient<CallOptionsExt = {}> {
  isAuthorized(
    request: DeepPartial<IsAuthorizedRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IsAuthorizedResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
