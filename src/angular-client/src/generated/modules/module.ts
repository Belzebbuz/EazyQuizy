// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: modules/module.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "";

export interface CreateModuleRequest {
  name: string;
}

export interface CreateModuleResponse {
  id: string;
}

function createBaseCreateModuleRequest(): CreateModuleRequest {
  return { name: "" };
}

export const CreateModuleRequest: MessageFns<CreateModuleRequest> = {
  encode(message: CreateModuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateModuleRequest>): CreateModuleRequest {
    return CreateModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModuleRequest>): CreateModuleRequest {
    const message = createBaseCreateModuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateModuleResponse(): CreateModuleResponse {
  return { id: "" };
}

export const CreateModuleResponse: MessageFns<CreateModuleResponse> = {
  encode(message: CreateModuleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateModuleResponse>): CreateModuleResponse {
    return CreateModuleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModuleResponse>): CreateModuleResponse {
    const message = createBaseCreateModuleResponse();
    message.id = object.id ?? "";
    return message;
  },
};

export type ModuleServiceDefinition = typeof ModuleServiceDefinition;
export const ModuleServiceDefinition = {
  name: "ModuleService",
  fullName: "ModuleService",
  methods: {
    create: {
      name: "Create",
      requestType: CreateModuleRequest,
      requestStream: false,
      responseType: CreateModuleResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [new Uint8Array([16, 34, 11, 47, 118, 49, 47, 109, 111, 100, 117, 108, 101, 115, 58, 1, 42])],
        },
      },
    },
  },
} as const;

export interface ModuleServiceImplementation<CallContextExt = {}> {
  create(
    request: CreateModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateModuleResponse>>;
}

export interface ModuleServiceClient<CallOptionsExt = {}> {
  create(
    request: DeepPartial<CreateModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateModuleResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
