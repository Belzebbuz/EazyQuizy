// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: quiz/game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Int32Value, StringValue } from "../google/protobuf/wrappers";
import { OrderedValue, QuestionType, StatusResponse } from "../types/types";

export const protobufPackage = "";

export enum GameInfoStatus {
  Created = 0,
  Started = 1,
  Paused = 2,
  Completed = 3,
  UNRECOGNIZED = -1,
}

export interface PlayRequest {
  gameId: string;
}

export interface GetGameInfoRequest {
  gameId: string;
}

export interface GetGameInfoResponse {
  gameId: string;
  players: GamePlayerInfo[];
  question: CurrentQuestionInfo | undefined;
  currentQuestion: number;
  totalQuestions: number;
  updateChannel: string;
  updateTimerChannel: string;
  status: GameInfoStatus;
}

export interface GamePlayerInfo {
  playerId: string;
  playerName: string;
  totalPoints: number;
  currentQuestionPoints: number | undefined;
  answered: boolean;
}

export interface CurrentQuestionInfo {
  questionType: QuestionType;
  singleAnswerQuestionInfo: GameSingleAnswerQuestionInfo | undefined;
  multipleAnswerQuestionInfo: GameMultipleAnswerQuestionInfo | undefined;
  rangeQuestionInfo: GameRangeQuestionInfo | undefined;
  orderQuestionInfo: GameOrderQuestionInfo | undefined;
}

export interface GameSingleAnswerQuestionInfo {
  id: string;
  text: string;
  imageUrl: string | undefined;
  answers: string[];
}

export interface GameMultipleAnswerQuestionInfo {
  id: string;
  text: string;
  imageUrl: string | undefined;
  answers: string[];
}

export interface GameRangeQuestionInfo {
  id: string;
  text: string;
  imageUrl: string | undefined;
  minValue: number;
  maxValue: number;
}

export interface GameOrderQuestionInfo {
  id: string;
  text: string;
  imageUrl: string | undefined;
  answers: string[];
}

export interface SetAnswerRequest {
  gameId: string;
  singleAnswer: string | undefined;
  multipleAnswer: string[];
  rangeAnswer: number | undefined;
  orderedAnswer: OrderedValue[];
}

function createBasePlayRequest(): PlayRequest {
  return { gameId: "" };
}

export const PlayRequest: MessageFns<PlayRequest> = {
  encode(message: PlayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PlayRequest>): PlayRequest {
    return PlayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlayRequest>): PlayRequest {
    const message = createBasePlayRequest();
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseGetGameInfoRequest(): GetGameInfoRequest {
  return { gameId: "" };
}

export const GetGameInfoRequest: MessageFns<GetGameInfoRequest> = {
  encode(message: GetGameInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameInfoRequest>): GetGameInfoRequest {
    return GetGameInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameInfoRequest>): GetGameInfoRequest {
    const message = createBaseGetGameInfoRequest();
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseGetGameInfoResponse(): GetGameInfoResponse {
  return {
    gameId: "",
    players: [],
    question: undefined,
    currentQuestion: 0,
    totalQuestions: 0,
    updateChannel: "",
    updateTimerChannel: "",
    status: 0,
  };
}

export const GetGameInfoResponse: MessageFns<GetGameInfoResponse> = {
  encode(message: GetGameInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    for (const v of message.players) {
      GamePlayerInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.question !== undefined) {
      CurrentQuestionInfo.encode(message.question, writer.uint32(26).fork()).join();
    }
    if (message.currentQuestion !== 0) {
      writer.uint32(32).int32(message.currentQuestion);
    }
    if (message.totalQuestions !== 0) {
      writer.uint32(40).int32(message.totalQuestions);
    }
    if (message.updateChannel !== "") {
      writer.uint32(50).string(message.updateChannel);
    }
    if (message.updateTimerChannel !== "") {
      writer.uint32(58).string(message.updateTimerChannel);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.players.push(GamePlayerInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.question = CurrentQuestionInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentQuestion = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalQuestions = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateChannel = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updateTimerChannel = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameInfoResponse>): GetGameInfoResponse {
    return GetGameInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameInfoResponse>): GetGameInfoResponse {
    const message = createBaseGetGameInfoResponse();
    message.gameId = object.gameId ?? "";
    message.players = object.players?.map((e) => GamePlayerInfo.fromPartial(e)) || [];
    message.question = (object.question !== undefined && object.question !== null)
      ? CurrentQuestionInfo.fromPartial(object.question)
      : undefined;
    message.currentQuestion = object.currentQuestion ?? 0;
    message.totalQuestions = object.totalQuestions ?? 0;
    message.updateChannel = object.updateChannel ?? "";
    message.updateTimerChannel = object.updateTimerChannel ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseGamePlayerInfo(): GamePlayerInfo {
  return { playerId: "", playerName: "", totalPoints: 0, currentQuestionPoints: undefined, answered: false };
}

export const GamePlayerInfo: MessageFns<GamePlayerInfo> = {
  encode(message: GamePlayerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.playerName !== "") {
      writer.uint32(18).string(message.playerName);
    }
    if (message.totalPoints !== 0) {
      writer.uint32(24).int32(message.totalPoints);
    }
    if (message.currentQuestionPoints !== undefined) {
      Int32Value.encode({ value: message.currentQuestionPoints! }, writer.uint32(34).fork()).join();
    }
    if (message.answered !== false) {
      writer.uint32(40).bool(message.answered);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GamePlayerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGamePlayerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalPoints = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currentQuestionPoints = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.answered = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GamePlayerInfo>): GamePlayerInfo {
    return GamePlayerInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GamePlayerInfo>): GamePlayerInfo {
    const message = createBaseGamePlayerInfo();
    message.playerId = object.playerId ?? "";
    message.playerName = object.playerName ?? "";
    message.totalPoints = object.totalPoints ?? 0;
    message.currentQuestionPoints = object.currentQuestionPoints ?? undefined;
    message.answered = object.answered ?? false;
    return message;
  },
};

function createBaseCurrentQuestionInfo(): CurrentQuestionInfo {
  return {
    questionType: 0,
    singleAnswerQuestionInfo: undefined,
    multipleAnswerQuestionInfo: undefined,
    rangeQuestionInfo: undefined,
    orderQuestionInfo: undefined,
  };
}

export const CurrentQuestionInfo: MessageFns<CurrentQuestionInfo> = {
  encode(message: CurrentQuestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.questionType !== 0) {
      writer.uint32(8).int32(message.questionType);
    }
    if (message.singleAnswerQuestionInfo !== undefined) {
      GameSingleAnswerQuestionInfo.encode(message.singleAnswerQuestionInfo, writer.uint32(18).fork()).join();
    }
    if (message.multipleAnswerQuestionInfo !== undefined) {
      GameMultipleAnswerQuestionInfo.encode(message.multipleAnswerQuestionInfo, writer.uint32(26).fork()).join();
    }
    if (message.rangeQuestionInfo !== undefined) {
      GameRangeQuestionInfo.encode(message.rangeQuestionInfo, writer.uint32(34).fork()).join();
    }
    if (message.orderQuestionInfo !== undefined) {
      GameOrderQuestionInfo.encode(message.orderQuestionInfo, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CurrentQuestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCurrentQuestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.questionType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.singleAnswerQuestionInfo = GameSingleAnswerQuestionInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.multipleAnswerQuestionInfo = GameMultipleAnswerQuestionInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rangeQuestionInfo = GameRangeQuestionInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.orderQuestionInfo = GameOrderQuestionInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CurrentQuestionInfo>): CurrentQuestionInfo {
    return CurrentQuestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CurrentQuestionInfo>): CurrentQuestionInfo {
    const message = createBaseCurrentQuestionInfo();
    message.questionType = object.questionType ?? 0;
    message.singleAnswerQuestionInfo =
      (object.singleAnswerQuestionInfo !== undefined && object.singleAnswerQuestionInfo !== null)
        ? GameSingleAnswerQuestionInfo.fromPartial(object.singleAnswerQuestionInfo)
        : undefined;
    message.multipleAnswerQuestionInfo =
      (object.multipleAnswerQuestionInfo !== undefined && object.multipleAnswerQuestionInfo !== null)
        ? GameMultipleAnswerQuestionInfo.fromPartial(object.multipleAnswerQuestionInfo)
        : undefined;
    message.rangeQuestionInfo = (object.rangeQuestionInfo !== undefined && object.rangeQuestionInfo !== null)
      ? GameRangeQuestionInfo.fromPartial(object.rangeQuestionInfo)
      : undefined;
    message.orderQuestionInfo = (object.orderQuestionInfo !== undefined && object.orderQuestionInfo !== null)
      ? GameOrderQuestionInfo.fromPartial(object.orderQuestionInfo)
      : undefined;
    return message;
  },
};

function createBaseGameSingleAnswerQuestionInfo(): GameSingleAnswerQuestionInfo {
  return { id: "", text: "", imageUrl: undefined, answers: [] };
}

export const GameSingleAnswerQuestionInfo: MessageFns<GameSingleAnswerQuestionInfo> = {
  encode(message: GameSingleAnswerQuestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.imageUrl !== undefined) {
      StringValue.encode({ value: message.imageUrl! }, writer.uint32(26).fork()).join();
    }
    for (const v of message.answers) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameSingleAnswerQuestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameSingleAnswerQuestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.answers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GameSingleAnswerQuestionInfo>): GameSingleAnswerQuestionInfo {
    return GameSingleAnswerQuestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameSingleAnswerQuestionInfo>): GameSingleAnswerQuestionInfo {
    const message = createBaseGameSingleAnswerQuestionInfo();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    message.answers = object.answers?.map((e) => e) || [];
    return message;
  },
};

function createBaseGameMultipleAnswerQuestionInfo(): GameMultipleAnswerQuestionInfo {
  return { id: "", text: "", imageUrl: undefined, answers: [] };
}

export const GameMultipleAnswerQuestionInfo: MessageFns<GameMultipleAnswerQuestionInfo> = {
  encode(message: GameMultipleAnswerQuestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.imageUrl !== undefined) {
      StringValue.encode({ value: message.imageUrl! }, writer.uint32(26).fork()).join();
    }
    for (const v of message.answers) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameMultipleAnswerQuestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMultipleAnswerQuestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.answers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GameMultipleAnswerQuestionInfo>): GameMultipleAnswerQuestionInfo {
    return GameMultipleAnswerQuestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameMultipleAnswerQuestionInfo>): GameMultipleAnswerQuestionInfo {
    const message = createBaseGameMultipleAnswerQuestionInfo();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    message.answers = object.answers?.map((e) => e) || [];
    return message;
  },
};

function createBaseGameRangeQuestionInfo(): GameRangeQuestionInfo {
  return { id: "", text: "", imageUrl: undefined, minValue: 0, maxValue: 0 };
}

export const GameRangeQuestionInfo: MessageFns<GameRangeQuestionInfo> = {
  encode(message: GameRangeQuestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.imageUrl !== undefined) {
      StringValue.encode({ value: message.imageUrl! }, writer.uint32(26).fork()).join();
    }
    if (message.minValue !== 0) {
      writer.uint32(32).int32(message.minValue);
    }
    if (message.maxValue !== 0) {
      writer.uint32(40).int32(message.maxValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameRangeQuestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameRangeQuestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minValue = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxValue = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GameRangeQuestionInfo>): GameRangeQuestionInfo {
    return GameRangeQuestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameRangeQuestionInfo>): GameRangeQuestionInfo {
    const message = createBaseGameRangeQuestionInfo();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    message.minValue = object.minValue ?? 0;
    message.maxValue = object.maxValue ?? 0;
    return message;
  },
};

function createBaseGameOrderQuestionInfo(): GameOrderQuestionInfo {
  return { id: "", text: "", imageUrl: undefined, answers: [] };
}

export const GameOrderQuestionInfo: MessageFns<GameOrderQuestionInfo> = {
  encode(message: GameOrderQuestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.imageUrl !== undefined) {
      StringValue.encode({ value: message.imageUrl! }, writer.uint32(26).fork()).join();
    }
    for (const v of message.answers) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameOrderQuestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameOrderQuestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.answers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GameOrderQuestionInfo>): GameOrderQuestionInfo {
    return GameOrderQuestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameOrderQuestionInfo>): GameOrderQuestionInfo {
    const message = createBaseGameOrderQuestionInfo();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    message.answers = object.answers?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetAnswerRequest(): SetAnswerRequest {
  return { gameId: "", singleAnswer: undefined, multipleAnswer: [], rangeAnswer: undefined, orderedAnswer: [] };
}

export const SetAnswerRequest: MessageFns<SetAnswerRequest> = {
  encode(message: SetAnswerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    if (message.singleAnswer !== undefined) {
      StringValue.encode({ value: message.singleAnswer! }, writer.uint32(18).fork()).join();
    }
    for (const v of message.multipleAnswer) {
      writer.uint32(26).string(v!);
    }
    if (message.rangeAnswer !== undefined) {
      Int32Value.encode({ value: message.rangeAnswer! }, writer.uint32(34).fork()).join();
    }
    for (const v of message.orderedAnswer) {
      OrderedValue.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAnswerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAnswerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.singleAnswer = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.multipleAnswer.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rangeAnswer = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.orderedAnswer.push(OrderedValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetAnswerRequest>): SetAnswerRequest {
    return SetAnswerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetAnswerRequest>): SetAnswerRequest {
    const message = createBaseSetAnswerRequest();
    message.gameId = object.gameId ?? "";
    message.singleAnswer = object.singleAnswer ?? undefined;
    message.multipleAnswer = object.multipleAnswer?.map((e) => e) || [];
    message.rangeAnswer = object.rangeAnswer ?? undefined;
    message.orderedAnswer = object.orderedAnswer?.map((e) => OrderedValue.fromPartial(e)) || [];
    return message;
  },
};

export type GameServiceDefinition = typeof GameServiceDefinition;
export const GameServiceDefinition = {
  name: "GameService",
  fullName: "GameService",
  methods: {
    getGameInfo: {
      name: "GetGameInfo",
      requestType: GetGameInfoRequest,
      requestStream: false,
      responseType: GetGameInfoResponse,
      responseStream: false,
      options: {},
    },
    play: {
      name: "Play",
      requestType: PlayRequest,
      requestStream: false,
      responseType: StatusResponse,
      responseStream: false,
      options: {},
    },
    setAnswer: {
      name: "SetAnswer",
      requestType: SetAnswerRequest,
      requestStream: false,
      responseType: StatusResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface GameServiceImplementation<CallContextExt = {}> {
  getGameInfo(
    request: GetGameInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetGameInfoResponse>>;
  play(request: PlayRequest, context: CallContext & CallContextExt): Promise<DeepPartial<StatusResponse>>;
  setAnswer(request: SetAnswerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<StatusResponse>>;
}

export interface GameServiceClient<CallOptionsExt = {}> {
  getGameInfo(
    request: DeepPartial<GetGameInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetGameInfoResponse>;
  play(request: DeepPartial<PlayRequest>, options?: CallOptions & CallOptionsExt): Promise<StatusResponse>;
  setAnswer(request: DeepPartial<SetAnswerRequest>, options?: CallOptions & CallOptionsExt): Promise<StatusResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
